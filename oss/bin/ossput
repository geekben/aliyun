#!/usr/bin/env python26
#coding=utf-8
from oss.oss_api import *
from oss.oss_util import *
from oss.oss_xml_handler import *
import optparse
import sys
import string
import ConfigParser
import os, sys, re, time
from optparse import OptionParser
import datetime
import commands

#DEBUG = True
DEBUG = False

SOURCE = "/mnt/apachelog/logs/sstlog"

help = \
'''ossput:
    put localfile oss://bucket/object --content-type=[content_type] --headers=\"key1:value1, key2:value2\" 
    config --id=[accessid] --key=[accesskey]
options:
    --help, print help message'''

cmdlists = {}
AclList = ['private', 'public-read', 'public-read-write']
OSSPrefix = 'oss://'
CONFIGFILE = os.path.expanduser('~') + '/.osscredentials'
CONFIGSECTION = 'OSSCredentials'
host = 'oss-internal.aliyuncs.com'
#host = 'oss.aliyuncs.com'
accessID = ""
accessKEY = ""

def formatDateTime(osstimestamp):
    date = re.compile("(\.\d*)?Z").sub(".000Z", osstimestamp)
    ts = time.strptime(date, "%Y-%m-%dT%H:%M:%S.000Z")
    return time.strftime("%Y-%m-%d %H:%M", ts)

def formatSize(size):
    size = int(size)
    coeffs = ['K', 'M', 'G', 'T']
    coeff = ""
    while size > 2048:
        size /= 1024
        coeff = coeffs.pop(0)
    return str(size) + coeff + "B"

def split_path(path):
    if not path.lower().startswith(OSSPrefix):
        print "%s parameter %s invalid, " \
              "must be start with %s" % \
              (args[0], args[1], OSSPrefix)
        sys.exit(1)
    pather = path[len(OSSPrefix):].split('/')
    return pather


def print_result(cmd, res):
    try:
        if res.status / 100 == 2:
            #print cmd, "OK"
            pass
        else:
            print "Error Headers:\n", res.getheaders()
            print "Error Body:\n", res.read()
            print "Error Status:\n", res.status
            print cmd, "Failed!"
    except AttributeError:
        pass

'split an object path'
def split_object_path(command, path):
    pather = split_path(path)
    if len(pather) <= 1:
        print "%s parameters invalid, must be a object format" % command
        sys.exit(1)
    return pather

def to_http_headers(string):
    map = {}
    for i in string.split(','):
        key_value_list = i.strip().split(':')
        if len(key_value_list) == 2:
           map[key_value_list[0]] = key_value_list[1] 
    return map
        
def cmd_delete(args):
    pather = split_path(args)
    bucket = pather[0]
    object = '/'.join(pather[1:])
    object = smart_code(object)
    if DEBUG: 
        print bucket
        print object
    return get_oss().delete_object(bucket, object)

def cmd_put(args, options):
    if len(args) < 2:
        print "%s miss parameters" % args[0]
        return
    localfile = args[0]
    print localfile
    if not os.path.isfile(localfile):
        print "localfile: %s NOT exist, please check" % (args[0])
        sys.exit(1)
    pather = split_path(args[1])
    object = ''
    filelock = os.path.basename(localfile)+'.tmp'
    if len(pather) == 1 or (len(pather) == 2 and pather[1] == ''): # e.g. upload to oss://bucket/
        #object = os.path.basename(localfile)
        object = filelock
    elif pather[len(pather) -1] == '': #e.g. uplod to oss://bucket/a/b/
        #object = '/'.join(pather[1:]) + os.path.basename(localfile)
        object = '/'.join(pather[1:]) + filelock
    else: #user specified objectname oss://bucket/[path]/object
        object = '/'.join(pather[1:]) + '.tmp' 
    object = smart_code(object)
    bucket = pather[0]
    content_type = "application/octet-stream"
    headers = {}
    if options.content_type:
        content_type = options.content_type
    if options.headers:
        headers = to_http_headers(options.headers)
    print headers

    res = get_oss().put_object_from_file(bucket, object, localfile, content_type, headers)

    if res.status == 200:
        header_map = convert_header2map(res.getheaders())
        if DEBUG:
            print "Object URL is: http://%s/%s/%s" % (host, bucket, object)
            print "Object abstract path is: oss://%s/%s" % (bucket, object)
            print "ETag is %s " % safe_get_element("etag", header_map) 
            print "recovery to the original name"
        pather_source = "oss://%s/%s" % (bucket, object)
        pather_destin = "oss://%s/%s" % (bucket, os.path.splitext(object)[0])
        cmd_copy([pather_source, pather_destin], options)
        if DEBUG: print "delete the orignial %s" % pather_source
        cmd_delete(pather_source)

    return res

def cmd_copy(args, options):
    if len(args) < 2:
        print "%s miss parameters" % args
        return
    pather_source = split_path(args[0])
    object_source = ''
    if len(pather_source) == 1 or (len(pather_source) == 2 and pather_source[1] == ''):
        print "%s : localfile: %s NOT exist, please check" % (args[0], args[1])
        sys.exit(1)
    else: #user specified objectname oss://bucket/[path]/object
        object_source = '/'.join(pather_source[1:])
    object_source = smart_code(object_source)
    bucket_source = pather_source[0]

    pather = split_path(args[1])
    if DEBUG: print object_source,bucket_source
    object = ''
    if len(pather) == 1 or (len(pather) == 2 and pather[1] == ''): # e.g. upload to oss://bucket/
        object = os.path.basename(localfile)
    elif pather[len(pather) -1] == '': #e.g. uplod to oss://bucket/a/b/
        object = '/'.join(pather[1:]) + os.path.basename(localfile)
    else: #user specified objectname oss://bucket/[path]/object
        object = '/'.join(pather[1:])
    object = smart_code(object)
    bucket = pather[0]
    content_type = ""
    headers = {}
    if options.headers:
        headers = to_http_headers(options.headers)
    if options.content_type:
        content_type = options.content_type
        headers['Content-Type'] = content_type

    res = get_oss().copy_object(bucket_source, object_source, bucket, object, headers)

    if res.status == 200:
        header_map = convert_header2map(res.getheaders())
        if DEBUG:
            print "Object URL is: http://%s/%s/%s" % (host, bucket, object)
            print "Object abstract path is: oss://%s/%s" % (bucket, object)
            print "ETag is %s " % safe_get_element("etag", header_map) 

    return res

def cmd_meta(args, options):
    if len(args) < 2:
        print "%s miss parameters" % args[0]
        return
    pather = split_object_path(args[0], args[1])
    bucket = pather[0] 
    object = '/'.join(pather[1:])
    object = smart_code(object)
    
    res = get_oss().head_object(bucket, object)
    if res.status == 200:
        header_map = convert_header2map(res.getheaders())
        width = 16
        print "%s: %s" % ("objectname".ljust(width), object)
        for key, value in header_map.items():
            print "%s: %s" % (key.ljust(width), value)

    return res


def cmd_configure(args, options):
    if options.accessid is None or options.accesskey is None:
        print "%s miss parameters, use --id=[accessid] --key=[accesskey] to specify id/key pair" % args[0]
        sys.exit(1) 
    config = ConfigParser.RawConfigParser()
    config.add_section(CONFIGSECTION)
    if options.host is not None:
        config.set(CONFIGSECTION, 'host', options.host)
    config.set(CONFIGSECTION, 'accessid', options.accessid)
    config.set(CONFIGSECTION, 'accesskey', options.accesskey)
    cfgfile = open(CONFIGFILE, 'w+')
    config.write(cfgfile)
    print "Your configuration is saved into %s ." % CONFIGFILE
    cfgfile.close()

def cmd_help(args, options):
    print help

def get_oss():
    oss = OssAPI(host, accessID, accessKEY)
    oss.show_bar = True
    return oss

def setup_crenditials():
    config = ConfigParser.ConfigParser()
    try:
        config.read(CONFIGFILE)
        global host
        global accessID
        global accessKEY
        try:
            host = config.get(CONFIGSECTION, 'host')
        except Exception, e:
            host = "oss.aliyuncs.com" 
        accessID = config.get(CONFIGSECTION, 'accessid')
        accessKEY = config.get(CONFIGSECTION, 'accesskey')
        if options.accessid is not None:
            accessID = options.accessid
        if options.accesskey is not None:
            accessKEY = options.accesskey
        if options.host is not None:
            host = options.host
    except Exception, e:
        if options.accessid is not None:
            accessID = options.accessid
        if options.accesskey is not None:
            accessKEY = options.accesskey
        if options.host is not None:
            host = options.host

        if len(accessID) == 0 or len(accessKEY) == 0:
            print "can't get accessid/accesskey, setup use : config --id=accessid --key=accesskey"
            sys.exit(1)

def setup_cmdlist():
    cmdlists['put'] = cmd_put
    cmdlists['config'] = cmd_configure
    cmdlists['help'] = cmd_help

def compress_log(rawlog):
    '''
    compress raw log
    '''
    tarball = rawlog + '.gz'
    if os.path.exists(tarball):
        return tarball
    if not os.path.exists(rawlog):
        return
    status = commands.getstatusoutput('gzip -f  %s' % rawlog)
    if not status[0]  == 0:
        print "Error! When compress file %." % rawlog
        sys.exit(1)
    return tarball

def hour(now, number=1):
    '''
    will output the last number file name
    '''
    args = []
    lasthour = now - datetime.timedelta(hours = 1)
    YYYYMMDDHH = lasthour.strftime('%Y%m%d%H')
    YYYYMMDD = lasthour.strftime('%Y%m%d')
    YYYY = lasthour.strftime('%Y')
    MM = lasthour.strftime('%m')
    DD = lasthour.strftime('%d')
    lasthour_log = os.path.join(SOURCE,YYYYMMDD, 'ssttrackerlogs.'+YYYYMMDDHH+'.log')
    compressed = compress_log(lasthour_log)
    if not compressed:
        print "Please make sure the raw file or compress file exists!"
        sys.exit(1)
    logname = os.path.basename(compressed)
    args.append(compressed)
    args.append(os.path.join('oss://zhuamobsst', YYYY, MM, DD, logname))
    if DEBUG: 
        print "INPUT :"
        print args
        print "End"
    return args

if __name__ == '__main__':
    parser = OptionParser()
    parser.add_option("-H", "--host", dest="host", help="specify ")
    parser.add_option("-i", "--id", dest="accessid", help="specify access id")
    parser.add_option("-k", "--key", dest="accesskey", help="specify access key")
    parser.add_option("-t", "--timeout", dest="timeout", help="timeout for sign url")
    parser.add_option("", "--upload_id", dest="upload_id", help="get parts to specify upload_id")
    parser.add_option("", "--part_number", dest="part_number", help="get parts to specify upload_id")
    parser.add_option("", "--data", dest="data", help="get parts to specify upload_id")
    parser.add_option("--headers", dest="headers", help="HTTP headers for put object, input format SHOULE like --headers=\"key1:value1,key2:value2\"")
    parser.add_option("-c", "--content-type", dest="content_type",
                  help="content type for the file, will return in GET")

    setup_cmdlist()
    #when not specify a option, the value is None
    (options, args) = parser.parse_args()
    if len(args) < 1:
        print help 
        sys.exit(1) 

    if args[0] == 'config':
        cmdlists['config'](args, options)

    if args[0] == 'hourly':
        now = datetime.datetime.now()
        args = hour(now, 1)

    setup_crenditials()
    begin = time.time()
    res = cmdlists['put'](args, options)
    print_result('put', res)
    end = time.time()
    sys.stderr.write("%.3f(s) elapsed\n" % (end - begin))

